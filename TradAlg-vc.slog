% Verification conditions for TradAlg.slog

% Run check_vcs_TradAlg to see if the program verifies all the VCs

:- type_check.

:- reset_types.

:- consult('TradAlg.slog').

:- notype_check.

:- prolog_call((
    retractall(all_unsat_vc(_,_,_,_,_,_)),
    retractall(dinvariant(_,_,_)),
    retractall(daxiom(_,_,_)),
    retractall(dinitial(_,_)),
    retractall(dparameters(_)),
    retractall(dvariables(_)),
    (exists_file('TradAlg-all.pl') ->
       open('TradAlg-all.pl',read,StreamVC)
    ;
       print_notfile('TradAlg-all.pl')
    ),
    style_check(-singleton),
    setlog:consult_vc(StreamVC),
    style_check(+singleton),
    close(StreamVC))).

% Change this number for a different timeout (ms)
def_to(60000).

:- prolog_call(nb_setval(vc_num,0)).
:- prolog_call(nb_setval(vc_ok,0)).
:- prolog_call(nb_setval(vc_err,0)).
:- prolog_call(nb_setval(vc_to,0)).
:- prolog_call(nb_setval(vc_time,0)).

:- prolog_call(dynamic(unsat_sol/6)).
:- prolog_call(dynamic(vc_proved/1)).

axioms_sat :-
  axm1(Delta) &
  axm2(SumSet) &
  axm3(SelectTop3).

initAlg_sat_invAlg :-
  initAlg(MarketActions,ActualActions,NetWorth,State,Check) &
  invAlg(MarketActions,ActualActions,NetWorth,Check,SumSet,NewMktActions).

initAlg_sat_invAct :-
  initAlg(MarketActions,ActualActions,NetWorth,State,Check) &
  invAct(NewMktActions).

actActions_is_sat :-
  actActions(MarketActions,ActualActions,State,Check,NetWorth,NewMktActions,MarketActions_,ActualActions_,NetWorth_,State_,Check_,Msj,SumSet,Delta) & 
  delay([MarketActions,ActualActions,NetWorth,State,Check] neq [MarketActions_,ActualActions_,NetWorth_,State_,Check_],false).

actActions_pi_invAlg(MarketActions,ActualActions,NetWorth,Check,SumSet,NewMktActions,MarketActions,ActualActions,State,Check,NetWorth,NewMktActions,MarketActions_,ActualActions_,NetWorth_,State_,Check_,Msj,SumSet,Delta) :-
  % here conjoin other ax/inv as hypotheses if necessary
  neg(
    invAlg(MarketActions,ActualActions,NetWorth,Check,SumSet,NewMktActions) &
    actActions(MarketActions,ActualActions,State,Check,NetWorth,NewMktActions,MarketActions_,ActualActions_,NetWorth_,State_,Check_,Msj,SumSet,Delta) implies
    invAlg(MarketActions_,ActualActions_,NetWorth_,Check_,SumSet,NewMktActions)
  ).

actActions_pi_invAct(NewMktActions,MarketActions,ActualActions,State,Check,NetWorth,NewMktActions,MarketActions_,ActualActions_,NetWorth_,State_,Check_,Msj,SumSet,Delta):-
  % actActions doesn't change invAct variables
  neg(true).

checkMarket_is_sat :-
  checkMarket(MarketActions,ActualActions,State,Check,NetWorth,MarketActions_,ActualActions_,State_,Check_,NetWorth_,Msj,SelectTop3,Delta) & 
  delay([MarketActions,ActualActions,State,Check,NetWorth] neq [MarketActions_,ActualActions_,State_,Check_,NetWorth_],false).

checkMarket_pi_invAlg(MarketActions,ActualActions,NetWorth,Check,SumSet,NewMktActions,MarketActions,ActualActions,State,Check,NetWorth,MarketActions_,ActualActions_,State_,Check_,NetWorth_,Msj,SelectTop3,Delta) :-
  % here conjoin other ax/inv as hypotheses if necessary
  neg(
    invAlg(MarketActions,ActualActions,NetWorth,Check,SumSet,NewMktActions) &
    checkMarket(MarketActions,ActualActions,State,Check,NetWorth,MarketActions_,ActualActions_,State_,Check_,NetWorth_,Msj,SelectTop3,Delta) implies
    invAlg(MarketActions_,ActualActions_,NetWorth_,Check_,SumSet,NewMktActions)
  ).

checkMarket_pi_invAct(NewMktActions,MarketActions,ActualActions,State,Check,NetWorth,MarketActions_,ActualActions_,State_,Check_,NetWorth_,Msj,SelectTop3,Delta):-
  % checkMarket doesn't change invAct variables
  neg(true).

buyActions_is_sat :-
  buyActions(MarketActions,ActualActions,State,Check,NetWorth,MarketActions_,ActualActions_,State_,Check_,NetWorth_,Msj,SelectTop3,SumSet) & 
  delay([MarketActions,ActualActions,State,Check,NetWorth] neq [MarketActions_,ActualActions_,State_,Check_,NetWorth_],false).

buyActions_pi_invAlg(MarketActions,ActualActions,NetWorth,Check,SumSet,NewMktActions,MarketActions,ActualActions,State,Check,NetWorth,MarketActions_,ActualActions_,State_,Check_,NetWorth_,Msj,SelectTop3,SumSet) :-
  % here conjoin other ax/inv as hypotheses if necessary
  neg(
    invAlg(MarketActions,ActualActions,NetWorth,Check,SumSet,NewMktActions) &
    buyActions(MarketActions,ActualActions,State,Check,NetWorth,MarketActions_,ActualActions_,State_,Check_,NetWorth_,Msj,SelectTop3,SumSet) implies
    invAlg(MarketActions_,ActualActions_,NetWorth_,Check_,SumSet,NewMktActions)
  ).

buyActions_pi_invAct(NewMktActions,MarketActions,ActualActions,State,Check,NetWorth,MarketActions_,ActualActions_,State_,Check_,NetWorth_,Msj,SelectTop3,SumSet):-
  % buyActions doesn't change invAct variables
  neg(true).

check_vcs_TradAlg :-
   def_to(TO) &
   check_aux(TO,[])!.

check_vcs_TradAlg(Opt) :-
   def_to(TO) &
   check_aux(TO,Opt)!.

check_vcs_TradAlg(TO,Opt) :-
   check_aux(TO,Opt)!.

check_sat_vc(VCID) :- prolog_call(check_sat_vc1(VCID)).

check_unsat_vc(VCID,TO,Opt) :- prolog_call(check_unsat_vc1(VCID,TO,Opt)).

check_aux_set_initial :- prolog_call(check_aux_set_initial1).

check_aux_stats :- prolog_call(check_aux_stats1).

check_aux(TO,Opt) :-
  check_aux_set_initial &
  check_sat_vc(axioms_sat) &
  check_sat_vc(initAlg_sat_invAlg) &
  check_sat_vc(initAlg_sat_invAct) &
  check_sat_vc(actActions_is_sat) &
  check_sat_vc(checkMarket_is_sat) &
  check_sat_vc(buyActions_is_sat) &
  check_unsat_vc(actActions_pi_invAlg(MarketActions,ActualActions,NetWorth,Check,SumSet,NewMktActions,MarketActions,ActualActions,State,Check,NetWorth,NewMktActions,MarketActions_,ActualActions_,NetWorth_,State_,Check_,Msj,SumSet,Delta),TO,Opt) &
  check_unsat_vc(actActions_pi_invAct(NewMktActions,MarketActions,ActualActions,State,Check,NetWorth,NewMktActions,MarketActions_,ActualActions_,NetWorth_,State_,Check_,Msj,SumSet,Delta),TO,Opt) &
  check_unsat_vc(checkMarket_pi_invAlg(MarketActions,ActualActions,NetWorth,Check,SumSet,NewMktActions,MarketActions,ActualActions,State,Check,NetWorth,MarketActions_,ActualActions_,State_,Check_,NetWorth_,Msj,SelectTop3,Delta),TO,Opt) &
  check_unsat_vc(checkMarket_pi_invAct(NewMktActions,MarketActions,ActualActions,State,Check,NetWorth,MarketActions_,ActualActions_,State_,Check_,NetWorth_,Msj,SelectTop3,Delta),TO,Opt) &
  check_unsat_vc(buyActions_pi_invAlg(MarketActions,ActualActions,NetWorth,Check,SumSet,NewMktActions,MarketActions,ActualActions,State,Check,NetWorth,MarketActions_,ActualActions_,State_,Check_,NetWorth_,Msj,SelectTop3,SumSet),TO,Opt) &
  check_unsat_vc(buyActions_pi_invAct(NewMktActions,MarketActions,ActualActions,State,Check,NetWorth,MarketActions_,ActualActions_,State_,Check_,NetWorth_,Msj,SelectTop3,SumSet),TO,Opt) &
  check_aux_stats.

:- nl & prolog_call(ansi_format([bold,fg(green)],'Type checking has been deactivated.',[])) & nl & nl.

:- nl & prolog_call(ansi_format([bold,fg(green)],'Call check_vcs_TradAlg to run the verification conditions.',[])) & nl & nl.

